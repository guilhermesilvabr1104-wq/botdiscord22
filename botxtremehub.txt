import discord
from discord import app_commands
from discord.ext import commands
import json
import os
from datetime import datetime

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Arquivo para salvar os scripts
SCRIPTS_FILE = "scripts.json"

# CONFIGURA√á√ÉO DE ADMINISTRADORES
# IDs de usu√°rios que podem usar comandos de admin
ADMIN_IDS = [
    1352573455735984148,  # Seu ID
]

# IDs de cargos que podem usar comandos de admin
ADMIN_ROLE_IDS = [
    1356381017526632538,  # Cargo Adm
]

# Fun√ß√£o para verificar se o usu√°rio √© admin
def is_admin(interaction: discord.Interaction) -> bool:
    # Verifica se tem permiss√£o de administrador
    if interaction.user.guild_permissions.administrator:
        return True
    
    # Verifica se o ID do usu√°rio est√° na lista
    if interaction.user.id in ADMIN_IDS:
        return True
    
    # Verifica se o usu√°rio tem algum dos cargos de admin
    if interaction.guild:
        user_role_ids = [role.id for role in interaction.user.roles]
        if any(role_id in ADMIN_ROLE_IDS for role_id in user_role_ids):
            return True
    
    # Verifica se √© o dono do servidor
    if interaction.guild and interaction.user.id == interaction.guild.owner_id:
        return True
    
    return False

# Carregar scripts do arquivo
def load_scripts():
    if os.path.exists(SCRIPTS_FILE):
        with open(SCRIPTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# Salvar scripts no arquivo
def save_scripts(scripts):
    with open(SCRIPTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(scripts, f, indent=4, ensure_ascii=False)

scripts_db = load_scripts()

# Evento quando o bot estiver pronto
@bot.event
async def on_ready():
    print(f'{bot.user} est√° online!')
    print(f'ID do Bot: {bot.user.id}')
    try:
        synced = await bot.tree.sync()
        print(f"Sincronizados {len(synced)} comandos")
    except Exception as e:
        print(f"Erro ao sincronizar comandos: {e}")

# Comando para verificar suas permiss√µes (para debug)
@bot.tree.command(name="minhas_permissoes", description="Verifica suas permiss√µes | Check your permissions")
async def minhas_permissoes(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üîç Suas Permiss√µes | Your Permissions",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="üë§ Usu√°rio | User",
        value=f"{interaction.user.mention} (ID: `{interaction.user.id}`)",
        inline=False
    )
    
    embed.add_field(
        name="üëë Permiss√£o Administrator",
        value="‚úÖ Sim | Yes" if interaction.user.guild_permissions.administrator else "‚ùå N√£o | No",
        inline=True
    )
    
    embed.add_field(
        name="üé≠ √â Admin do Bot",
        value="‚úÖ Sim | Yes" if is_admin(interaction) else "‚ùå N√£o | No",
        inline=True
    )
    
    embed.add_field(
        name="üë• Cargos | Roles",
        value=", ".join([role.mention for role in interaction.user.roles[1:]]) or "Nenhum | None",
        inline=False
    )
    
    # Listar IDs dos cargos
    role_ids = "\n".join([f"{role.name}: `{role.id}`" for role in interaction.user.roles[1:]]) or "Nenhum"
    embed.add_field(
        name="üÜî IDs dos Cargos | Role IDs",
        value=role_ids,
        inline=False
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Comando para adicionar jogo (apenas ADM)
@bot.tree.command(name="adicionar_jogo", description="[ADMIN] Adiciona um novo jogo com script | [ADMIN] Add a new game with script")
@app_commands.describe(
    nome="Nome do jogo | Game name",
    script="C√≥digo do script | Script code"
)
async def adicionar_jogo(interaction: discord.Interaction, nome: str, script: str):
    # Verificar se o usu√°rio √© admin usando a nova fun√ß√£o
    if not is_admin(interaction):
        await interaction.response.send_message(
            "‚ùå Apenas administradores podem usar este comando! | Only administrators can use this command!\n"
            f"Use `/minhas_permissoes` para verificar suas permiss√µes.",
            ephemeral=True
        )
        return
    
    # Adicionar o jogo ao banco de dados
    scripts_db[nome.lower()] = {
        "nome": nome,
        "script": script,
        "adicionado_por": str(interaction.user),
        "data": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
        "views": 0,
        "status": "working"
    }
    
    save_scripts(scripts_db)
    
    embed = discord.Embed(
        title="‚úÖ Jogo Adicionado! | Game Added!",
        description=f"**{nome}** foi adicionado com sucesso! | was successfully added!",
        color=discord.Color.green()
    )
    embed.add_field(name="üìù Script", value=f"```{script[:100]}...```" if len(script) > 100 else f"```{script}```", inline=False)
    embed.set_footer(text=f"Adicionado por | Added by {interaction.user.name}")
    
    await interaction.response.send_message(embed=embed)

# Comando para listar todos os scripts dispon√≠veis
@bot.tree.command(name="lista_scripts", description="Mostra todos os jogos dispon√≠veis | Shows all available games")
async def lista_scripts(interaction: discord.Interaction):
    if not scripts_db:
        await interaction.response.send_message("üì≠ Nenhum jogo dispon√≠vel no momento! | No games available at the moment!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üéÆ Lista de Scripts Dispon√≠veis | Available Scripts List",
        description="Use `/pegar_script` para copiar o script de um jogo | Use `/pegar_script` to copy a game's script",
        color=discord.Color.blue()
    )
    
    for key, jogo in scripts_db.items():
        status = jogo.get('status', 'working')
        status_emoji = "üü¢" if status == "working" else "üî¥"
        status_text = "Working" if status == "working" else "Not Working"
        
        embed.add_field(
            name=f"{status_emoji} {jogo['nome']}",
            value=f"**Status:** {status_text}\nüëÅÔ∏è {jogo['views']} visualiza√ß√µes | views\nüìÖ {jogo['data']}",
            inline=False
        )
    
    embed.set_footer(text=f"Total: {len(scripts_db)} jogos | games")
    await interaction.response.send_message(embed=embed)

# Comando para pegar o script de um jogo espec√≠fico
@bot.tree.command(name="pegar_script", description="Pega o script de um jogo espec√≠fico | Get a specific game's script")
@app_commands.describe(nome="Nome do jogo | Game name")
async def pegar_script(interaction: discord.Interaction, nome: str):
    jogo_key = nome.lower()
    
    if jogo_key not in scripts_db:
        await interaction.response.send_message(f"‚ùå Jogo '{nome}' n√£o encontrado! Use `/lista_scripts` para ver os jogos dispon√≠veis. | Game '{nome}' not found! Use `/lista_scripts` to see available games.", ephemeral=True)
        return
    
    jogo = scripts_db[jogo_key]
    
    # Incrementar views
    scripts_db[jogo_key]["views"] += 1
    save_scripts(scripts_db)
    
    status = jogo.get('status', 'working')
    status_emoji = "üü¢" if status == "working" else "üî¥"
    status_text = "Working (Funcionando)" if status == "working" else "Not Working (N√£o Funcionando)"
    
    embed = discord.Embed(
        title=f"üìú Script: {status_emoji} {jogo['nome']}",
        description="Copie o c√≥digo abaixo | Copy the code below:",
        color=discord.Color.green() if status == "working" else discord.Color.red()
    )
    
    embed.add_field(name="üìä Status", value=f"{status_emoji} **{status_text}**", inline=True)
    embed.add_field(name="üëÅÔ∏è Views", value=f"{jogo['views']} visualiza√ß√µes | views", inline=True)
    
    script_text = jogo['script']
    if len(script_text) > 1000:
        embed.add_field(name="‚ö†Ô∏è Script Longo | Long Script", value="O script ser√° enviado em partes separadas. | The script will be sent in separate parts.", inline=False)
        await interaction.response.send_message(embed=embed)
        
        for i in range(0, len(script_text), 1900):
            await interaction.followup.send(f"```lua\n{script_text[i:i+1900]}\n```")
    else:
        embed.add_field(name="üìù C√≥digo | Code", value=f"```lua\n{script_text}\n```", inline=False)
        embed.set_footer(text=f"Adicionado por | Added by {jogo['adicionado_por']} em | on {jogo['data']}")
        await interaction.response.send_message(embed=embed, ephemeral=True)

# Comando para editar um jogo (apenas ADM)
@bot.tree.command(name="editar_jogo", description="[ADMIN] Edita o script de um jogo existente | [ADMIN] Edit a game's script")
@app_commands.describe(
    nome="Nome do jogo | Game name",
    novo_script="Novo c√≥digo do script (opcional) | New script code (optional)",
    status="Status do script: working ou notworking | Script status: working or notworking"
)
@app_commands.choices(status=[
    app_commands.Choice(name="üü¢ Working (Funcionando)", value="working"),
    app_commands.Choice(name="üî¥ Not Working (N√£o Funcionando)", value="notworking")
])
async def editar_jogo(interaction: discord.Interaction, nome: str, status: app_commands.Choice[str] = None, novo_script: str = None):
    if not is_admin(interaction):
        await interaction.response.send_message(
            "‚ùå Apenas administradores podem usar este comando! | Only administrators can use this command!\n"
            f"Use `/minhas_permissoes` para verificar suas permiss√µes.",
            ephemeral=True
        )
        return
    
    jogo_key = nome.lower()
    
    if jogo_key not in scripts_db:
        await interaction.response.send_message(f"‚ùå Jogo '{nome}' n√£o encontrado! | Game '{nome}' not found!", ephemeral=True)
        return
    
    if novo_script is None and status is None:
        await interaction.response.send_message("‚ùå Voc√™ precisa fornecer pelo menos o novo script ou o status! | You need to provide at least the new script or status!", ephemeral=True)
        return
    
    mudancas = []
    
    if novo_script is not None:
        scripts_db[jogo_key]['script'] = novo_script
        mudancas.append("üìù Script atualizado | Script updated")
    
    if status is not None:
        scripts_db[jogo_key]['status'] = status.value
        status_emoji = "üü¢" if status.value == "working" else "üî¥"
        status_texto = "Working (Funcionando)" if status.value == "working" else "Not Working (N√£o Funcionando)"
        mudancas.append(f"{status_emoji} Status: {status_texto}")
    
    scripts_db[jogo_key]['editado_por'] = str(interaction.user)
    scripts_db[jogo_key]['data_edicao'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    save_scripts(scripts_db)
    
    status_atual = scripts_db[jogo_key].get('status', 'working')
    emoji_status = "üü¢" if status_atual == "working" else "üî¥"
    
    embed = discord.Embed(
        title="‚úèÔ∏è Jogo Editado! | Game Edited!",
        description=f"{emoji_status} **{scripts_db[jogo_key]['nome']}** foi atualizado com sucesso! | was successfully updated!",
        color=discord.Color.orange()
    )
    
    embed.add_field(name="üìã Mudan√ßas | Changes", value="\n".join(mudancas), inline=False)
    
    if novo_script:
        embed.add_field(name="üìù Novo Script | New Script", value=f"```{novo_script[:100]}...```" if len(novo_script) > 100 else f"```{novo_script}```", inline=False)
    
    embed.set_footer(text=f"Editado por | Edited by {interaction.user.name}")
    
    await interaction.response.send_message(embed=embed)

# Comando para remover um jogo (apenas ADM)
@bot.tree.command(name="remover_jogo", description="[ADMIN] Remove um jogo da lista | [ADMIN] Remove a game from the list")
@app_commands.describe(nome="Nome do jogo a ser removido | Game name to remove")
async def remover_jogo(interaction: discord.Interaction, nome: str):
    if not is_admin(interaction):
        await interaction.response.send_message(
            "‚ùå Apenas administradores podem usar este comando! | Only administrators can use this command!\n"
            f"Use `/minhas_permissoes` para verificar suas permiss√µes.",
            ephemeral=True
        )
        return
    
    jogo_key = nome.lower()
    
    if jogo_key not in scripts_db:
        await interaction.response.send_message(f"‚ùå Jogo '{nome}' n√£o encontrado! | Game '{nome}' not found!", ephemeral=True)
        return
    
    jogo_nome = scripts_db[jogo_key]['nome']
    del scripts_db[jogo_key]
    save_scripts(scripts_db)
    
    embed = discord.Embed(
        title="üóëÔ∏è Jogo Removido | Game Removed",
        description=f"**{jogo_nome}** foi removido da lista! | was removed from the list!",
        color=discord.Color.red()
    )
    
    await interaction.response.send_message(embed=embed)

# Comando de ajuda
@bot.tree.command(name="ajuda", description="Mostra todos os comandos dispon√≠veis | Shows all available commands")
async def ajuda(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìñ Comandos do Bot | Bot Commands",
        description="Lista de todos os comandos dispon√≠veis | List of all available commands",
        color=discord.Color.purple()
    )
    
    embed.add_field(
        name="üë• Comandos para Membros | Member Commands",
        value=(
            "`/lista_scripts` - Ver todos os jogos dispon√≠veis | See all available games\n"
            "`/pegar_script [nome]` - Pegar o script de um jogo | Get a game's script\n"
            "`/minhas_permissoes` - Verificar suas permiss√µes | Check your permissions\n"
            "`/ajuda` - Mostra esta mensagem | Shows this message"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üëë Comandos para Administradores | Administrator Commands",
        value=(
            "`/adicionar_jogo [nome] [script]` - Adiciona um novo jogo | Add a new game\n"
            "`/editar_jogo [nome] [novo_script] [status]` - Edita um jogo | Edit a game\n"
            "`/remover_jogo [nome]` - Remove um jogo da lista | Remove a game from the list"
        ),
        inline=False
    )
    
    embed.set_footer(text="KontroZZ Hub - Script Manager")
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Iniciar o bot
if __name__ == "__main__":
    TOKEN = "MTQzMTI5MTE3Nzc5Mjk2NjkwNg.Gr0rrj.oIHZpbslVjnquA_SQ5740ftSrT-tcXtwQv-K9E"  # IMPORTANTE: Use vari√°vel de ambiente em produ√ß√£o
    bot.run(TOKEN)